{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNsxhqJYLq0XsP6Fp+FD61u"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"wOObg3D_XJop","executionInfo":{"status":"ok","timestamp":1676194690335,"user_tz":-540,"elapsed":438,"user":{"displayName":"밥김","userId":"04111575332816163527"}}},"outputs":[],"source":["# 좀 더 구체적인 알고리즘으로 럭키백 확률을 구하고 싶다. k-최근접이웃 알고리즘은 너무 단순"]},{"cell_type":"code","source":["import pandas as pd \n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsClassifier\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LogisticRegression\n","from scipy.special import expit\n","from scipy.special import softmax"],"metadata":{"id":"lq7m3-17VMQ7","executionInfo":{"status":"ok","timestamp":1676194691529,"user_tz":-540,"elapsed":930,"user":{"displayName":"밥김","userId":"04111575332816163527"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["fish = pd.read_csv('https://bit.ly/fish_csv_data') # 데이터프레임 확인\n","print(fish.head())\n","print()\n","print('생선의 종류를 확인',pd.unique(fish['Species'])) # unique함수 : species열에서 고유한 값을 출력하기"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"781iam2iVYGA","executionInfo":{"status":"ok","timestamp":1676194691906,"user_tz":-540,"elapsed":380,"user":{"displayName":"밥김","userId":"04111575332816163527"}},"outputId":"b2dd2cfd-9e3f-4910-9c44-255739eca206"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["  Species  Weight  Length  Diagonal   Height   Width\n","0   Bream   242.0    25.4      30.0  11.5200  4.0200\n","1   Bream   290.0    26.3      31.2  12.4800  4.3056\n","2   Bream   340.0    26.5      31.1  12.3778  4.6961\n","3   Bream   363.0    29.0      33.5  12.7300  4.4555\n","4   Bream   430.0    29.0      34.0  12.4440  5.1340\n","\n","생선의 종류를 확인 ['Bream' 'Roach' 'Whitefish' 'Parkki' 'Perch' 'Pike' 'Smelt']\n"]}]},{"cell_type":"code","source":["# 데이터전처리\n","fish_input = fish[['Weight','Length','Diagonal','Height','Width']].to_numpy() # 넘파이배열로 인풋데이터 만들기\n","fish_target = fish['Species'].to_numpy()\n","train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, random_state=42)\n","ss = StandardScaler()\n","ss.fit(train_input)\n","train_scaled = ss.transform(train_input)\n","test_scaled = ss.transform(test_input)"],"metadata":{"id":"1bWcP3ENWkBN","executionInfo":{"status":"ok","timestamp":1676194696158,"user_tz":-540,"elapsed":284,"user":{"displayName":"밥김","userId":"04111575332816163527"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["##### 다중 분류 : 타깃 데이터에 2개 이상의 클래스가 포함된 문제"],"metadata":{"id":"-PSub-w3-uFv"}},{"cell_type":"code","source":["# k-최근접 이웃 알고리즘의 럭키백확률을 구해보기\n","kn = KNeighborsClassifier(n_neighbors=3) \n","kn.fit(train_scaled, train_target)\n","print('클래스의 순서:',kn.classes_) # classes_함수 : 다중분류 일 때에 알고리즘에 정렬된 클래스의 순서를 알려줌 (알파벳순서)\n","print()\n","\n","proba = kn.predict_proba(test_scaled[:5]) # predict_proba() 함수 : 클래스별 확률값을 반환\n","print('클래스별 확률')\n","print(np.round(proba, decimals = 4))\n","print()\n","\n","distances, indexes = kn.kneighbors(test_scaled[3:4])  # 슬라이싱사용 - 하나의 샘플만 사용해도 항상 2차원 배열이 만들어짐\n","print('인덱스3에서 최근접 3개의 타깃:',train_target[indexes])\n","print()\n","print('슬라이싱사용:',test_scaled[3:4])\n","\n","# 알고리즘이 단순하여 확률이 고정적으로 나온다"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zG0Tv6MvXl7b","executionInfo":{"status":"ok","timestamp":1676195219161,"user_tz":-540,"elapsed":7,"user":{"displayName":"밥김","userId":"04111575332816163527"}},"outputId":"f58b0df5-5c1c-4907-95e6-1dee2e93d291"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["클래스의 순서: ['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish']\n","\n","클래스별 확률\n","[[0.     0.     1.     0.     0.     0.     0.    ]\n"," [0.     0.     0.     0.     0.     1.     0.    ]\n"," [0.     0.     0.     1.     0.     0.     0.    ]\n"," [0.     0.     0.6667 0.     0.3333 0.     0.    ]\n"," [0.     0.     0.6667 0.     0.3333 0.     0.    ]]\n","\n","인덱스3에서 최근접 3개의 타깃: [['Roach' 'Perch' 'Perch']]\n","\n","슬라이싱사용: [[-0.34698097 -0.23396068 -0.22320459 -0.11905019 -0.12233464]]\n","인덱싱사용: [-0.34698097 -0.23396068 -0.22320459 -0.11905019 -0.12233464]\n"]}]},{"cell_type":"markdown","source":["##### 로지스틱 회귀 : 선형 방정식을 학습 (ex) z = ax+by+cz+d (가중치:a,b,c,d  특성:x,y,z)\n","- 회귀의 확률을 구하는 함수    \n","이중분류 : 시그모이드 함수 (로지스틱함수) = 1/(1+e^-z) ==> 확률이 0과 1사이로 나온다   \n","다중분류 : 소프트맥스 함수   \n","==> s_sum = e^z1+e^z2+e^z3+e^z4+e^z5... ==> 확률1 = e^z1/e_sum, 확률2 = e^z2/e_sum ... (확률은 전체 합하여 1이 됨)\n","\n"],"metadata":{"id":"ggno3nCMZ4W2"}},{"cell_type":"code","source":["# sigmoid 그려보기\n","z = np.arange(-5,5,0.1)\n","phi = 1 / (1+np.exp(-z)) # exp함수 : 지수함수를 계산\n","plt.title('sigmoid function')\n","plt.plot(z,phi)\n","plt.xlabel('z')\n","plt.ylabel('phi')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"YZO2UrUBDrgE","executionInfo":{"status":"ok","timestamp":1676196035672,"user_tz":-540,"elapsed":592,"user":{"displayName":"밥김","userId":"04111575332816163527"}},"outputId":"6f9418af-db82-4078-98e1-dc94bb6a56cb"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# logistic regression으로 이진 분류 수행하기\n","bream_smelt_indexes = (train_target == 'Bream')|(train_target == 'Smelt') # True값만 반환하는 불리언 인덱싱\n","input_bs = train_scaled[bream_smelt_indexes]\n","target_bs = train_target[bream_smelt_indexes]\n","lr =  LogisticRegression()\n","lr.fit(input_bs, target_bs)\n","print('클래스 정렬:',lr.classes_)\n","print()\n","print('클래스별 확률\\n',lr.predict_proba(input_bs[:5]))\n","print()\n","\n","print('가중치:',lr.coef_,'\\n절편:',lr.intercept_)\n","decisions = lr.decision_function(input_bs[:5])\n","print('처음 5개의 클래스별 z값:',decisions)\n","print('처음 5개의 확률:',expit(decisions)) # expit함수 : sigmoid의 계산 "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mFuJcrYEbTq","executionInfo":{"status":"ok","timestamp":1676197307829,"user_tz":-540,"elapsed":305,"user":{"displayName":"밥김","userId":"04111575332816163527"}},"outputId":"e714dbde-2acb-4981-ff78-d2a251f5eaff"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["클래스 정렬: ['Bream' 'Smelt']\n","\n","클래스별 확률\n"," [[0.99759855 0.00240145]\n"," [0.02735183 0.97264817]\n"," [0.99486072 0.00513928]\n"," [0.98584202 0.01415798]\n"," [0.99767269 0.00232731]]\n","\n","가중치: [[-0.4037798  -0.57620209 -0.66280298 -1.01290277 -0.73168947]] \n","절편: [-2.16155132]\n","처음 5개의 클래스별 z값: [-6.02927744  3.57123907 -5.26568906 -4.24321775 -6.0607117 ]\n","처음 5개의 확률: [0.00240145 0.97264817 0.00513928 0.01415798 0.00232731]\n"]}]},{"cell_type":"code","source":["# 로지스틱 회귀로 다중 분류 수행하기\n","lr2 = LogisticRegression(max_iter = 1000, C = 20) \n","# 매개변수로 score높이기\n","# max_iter : 학습 반복 횟수 (기본100)\n","# C : 규제의 정도 값이 높아질수록 규제가 줄어듦 (lr2는 계수의 제곱을 규제하는 L2규제를 시행, C의 기본값은 1)\n","lr2.fit(train_scaled,train_target)\n","print('train score:',lr2.score(train_scaled, train_target))\n","print('test score:',lr2.score(test_scaled, test_target))\n","print()\n","print('처음 5개 샘플 예측:',lr2.predict(test_scaled[:5]))\n","print()\n","print('클래스 정렬:',lr2.classes_)\n","print()\n","proba = lr2.predict_proba(test_scaled[:5])\n","print('처음 5개 샘플에 대한 예측 확률\\n',np.round(proba,decimals=3))\n","print()\n","print('가중치:',lr2.coef_,'\\n절편:',lr2.intercept_)\n","print()\n","decision = lr2.decision_function(test_scaled[:5])\n","print('z값')\n","print(np.round(decision,decimals=2))\n","print()\n","proba = softmax(decision,axis=1)\n","print('softmax함수 계산값')\n","print(np.round(proba,decimals=3))\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b2O_PVntJR8G","executionInfo":{"status":"ok","timestamp":1676199943429,"user_tz":-540,"elapsed":557,"user":{"displayName":"밥김","userId":"04111575332816163527"}},"outputId":"832061da-d6d0-473c-a7aa-44425ce0533c"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["train score: 0.9327731092436975\n","test score: 0.925\n","\n","처음 5개 샘플 예측: ['Perch' 'Smelt' 'Pike' 'Roach' 'Perch']\n","\n","클래스 정렬: ['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish']\n","\n","처음 5개 샘플에 대한 예측 확률\n"," [[0.    0.014 0.841 0.    0.136 0.007 0.003]\n"," [0.    0.003 0.044 0.    0.007 0.946 0.   ]\n"," [0.    0.    0.034 0.935 0.015 0.016 0.   ]\n"," [0.011 0.034 0.306 0.007 0.567 0.    0.076]\n"," [0.    0.    0.904 0.002 0.089 0.002 0.001]]\n","\n","가중치: [[-1.49003275 -1.02925176  2.59356474  7.70350984 -1.20066157]\n"," [ 0.19620537 -2.01052749 -3.77987621  6.50489261 -1.99489364]\n"," [ 3.56276878  6.34365071 -8.48975326 -5.75755348  3.79310579]\n"," [-0.10459757  3.60313904  3.93066899 -3.61726857 -1.75071811]\n"," [-1.40056679 -6.07506888  5.25965811 -0.8722508   1.8604416 ]\n"," [-1.38530817  1.49219656  1.39230089 -5.67731689 -4.40095042]\n"," [ 0.62153112 -2.32413817 -0.90656327  1.71598729  3.69367635]] \n","절편: [-0.09204794 -0.26290741  3.25100391 -0.1474022   2.65493564 -6.78779327\n","  1.38421128]\n","\n","z값\n","[[ -6.5    1.03   5.16  -2.73   3.34   0.33  -0.63]\n"," [-10.86   1.93   4.77  -2.4    2.98   7.84  -4.26]\n"," [ -4.34  -6.23   3.17   6.49   2.36   2.42  -3.87]\n"," [ -0.68   0.45   2.65  -1.19   3.26  -5.75   1.26]\n"," [ -6.4   -1.99   5.82  -0.11   3.5   -0.11  -0.71]]\n","\n","softmax함수 계산값\n","[[0.    0.014 0.841 0.    0.136 0.007 0.003]\n"," [0.    0.003 0.044 0.    0.007 0.946 0.   ]\n"," [0.    0.    0.034 0.935 0.015 0.016 0.   ]\n"," [0.011 0.034 0.306 0.007 0.567 0.    0.076]\n"," [0.    0.    0.904 0.002 0.089 0.002 0.001]]\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"SthGLIrEKALW"},"execution_count":null,"outputs":[]}]}